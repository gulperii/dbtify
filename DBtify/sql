CREATE TABLE `dbtify`.`listeners` (
  `username` INT NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`username`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE);

CREATE TABLE `dbtify`.`album` (
  `id` INT NOT NULL,
  `genre` VARCHAR(45) NOT NULL,
  `title` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE);


  INSERT INTO `dbtify`.`accounts` (`username`, `password`) VALUES ('Araba', 'Car');


STORED PROCEDURE:
DELIMITER $$

CREATE PROCEDURE getCollaborators(
IN artist_name VARCHAR(64),
IN artist_surname VARCHAR(64)
)
BEGIN
	SELECT
		coartists.artist_id

	FROM
		coartists
	JOIN albums
    ON coartists.album_id = albums.id
    JOIN artists
    ON albums.artist_id = artists.id
    WHERE artists.name = artist_name
    AND artists.surname = artist_surname;

END$$
DELIMITER ;

CALL getCollaborators('Taylor','Swift')


DELETE ALBUM TRIGGER:
DROP TRIGGER IF EXISTS `dbtify`.`albums_BEFORE_DELETE`;

DELIMITER $$
USE `dbtify`$$
CREATE DEFINER = CURRENT_USER TRIGGER `dbtify`.`albums_BEFORE_DELETE` BEFORE DELETE ON `albums` FOR EACH ROW
BEGIN
DELETE FROM `dbtify`.`songs` WHERE (`album_id` = OLD.id);

END$$
DELIMITER ;



DELETE ALBUM TRÄ°GGERI


USE `dbtify`;

DELIMITER $$

USE `dbtify`$$
DROP TRIGGER IF EXISTS `dbtify`.`albums_BEFORE_DELETE` $$
DELIMITER ;
DROP TRIGGER IF EXISTS `dbtify`.`albums_AFTER_DELETE`;

DELIMITER $$
USE `dbtify`$$
CREATE DEFINER = CURRENT_USER TRIGGER `dbtify`.`albums_AFTER_DELETE` AFTER DELETE ON `albums` FOR EACH ROW
BEGIN
DELETE FROM `dbtify`.`songs` WHERE (`album_id` = OLD.id);

END$$
DELIMITER ;
